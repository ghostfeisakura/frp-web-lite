#!/bin/bash

# FRP Web Control Panel - One-Click Installation Script
# Compatible with Ubuntu 18.04+ and Debian 9+
#
# Usage: sudo bash install.sh
#
# This script will:
# 1. Install Python3 and pip if not present
# 2. Download and install frps (FRP Server) automatically
# 3. Configure frps with default settings
# 4. Install Flask and dependencies for web control panel
# 5. Set up the web control panel in /opt/frp-web-control/
# 6. Configure systemd services for both frps and web panel
# 7. Set up sudo permissions for frps management
# 8. Start both services and enable auto-start

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration for lightweight deployment
INSTALL_DIR="/opt/frp-web-control"
SERVICE_NAME="frp-web"
WEB_USER="frp-web"
WEB_PORT="5000"
MEMORY_LIMIT="400M"
BACKUP_DIR="/opt/frp-web-control-backup-$(date +%Y%m%d-%H%M%S)"

# Functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

check_root() {
    if [[ $EUID -ne 0 ]]; then
        log_error "This script must be run as root (use sudo)"
        exit 1
    fi
}

check_os() {
    if [[ ! -f /etc/os-release ]]; then
        log_error "Cannot determine OS version"
        exit 1
    fi
    
    . /etc/os-release
    
    if [[ "$ID" != "ubuntu" && "$ID" != "debian" ]]; then
        log_warning "This script is designed for Ubuntu/Debian. Proceeding anyway..."
    fi
    
    log_info "Detected OS: $PRETTY_NAME"
}

backup_existing() {
    if [[ -d "$INSTALL_DIR" ]]; then
        log_warning "Existing installation found. Creating backup..."
        cp -r "$INSTALL_DIR" "$BACKUP_DIR"
        log_info "Backup created at: $BACKUP_DIR"
    fi
}

install_dependencies() {
    log_info "Updating package list..."
    apt-get update -qq

    log_info "Installing system dependencies..."
    apt-get install -y python3 python3-pip python3-venv curl wget sudo unzip

    # Check if python3 is working
    if ! command -v python3 &> /dev/null; then
        log_error "Python3 installation failed"
        exit 1
    fi

    log_success "System dependencies installed"
}

install_frps() {
    log_info "Installing frps (FRP Server)..."

    # Detect system architecture
    ARCH=$(uname -m)
    case $ARCH in
        x86_64)
            FRP_ARCH="amd64"
            ;;
        aarch64|arm64)
            FRP_ARCH="arm64"
            ;;
        armv7l)
            FRP_ARCH="arm"
            ;;
        *)
            log_error "Unsupported architecture: $ARCH"
            exit 1
            ;;
    esac

    # Get latest frp version
    log_info "Detecting latest frp version..."
    FRP_VERSION=$(curl -s https://api.github.com/repos/fatedier/frp/releases/latest | grep '"tag_name"' | cut -d'"' -f4)

    if [ -z "$FRP_VERSION" ]; then
        log_warning "Failed to detect latest version, using v0.58.1"
        FRP_VERSION="v0.58.1"
    fi

    log_info "Installing frp $FRP_VERSION for $FRP_ARCH..."

    # Download frp
    FRP_URL="https://github.com/fatedier/frp/releases/download/${FRP_VERSION}/frp_${FRP_VERSION#v}_linux_${FRP_ARCH}.tar.gz"

    cd /tmp
    if ! wget -q "$FRP_URL" -O frp.tar.gz; then
        log_error "Failed to download frp from $FRP_URL"
        exit 1
    fi

    # Extract frp
    tar -xzf frp.tar.gz
    FRP_DIR=$(find . -name "frp_*_linux_${FRP_ARCH}" -type d | head -1)

    if [ -z "$FRP_DIR" ]; then
        log_error "Failed to extract frp archive"
        exit 1
    fi

    # Install frps binary
    install -m 755 "$FRP_DIR/frps" /usr/local/bin/frps

    # Create frp configuration directory
    mkdir -p /etc/frp

    # Create default frps configuration
    cat > /etc/frp/frps.yaml << 'EOF'
# FRP Server Configuration
# Generated by frp-web-lite installer

# Server settings
bindAddr = "0.0.0.0"
bindPort = 7000

# Web dashboard (optional)
webServer.addr = "0.0.0.0"
webServer.port = 7500
webServer.user = "admin"
webServer.password = "admin123"

# Authentication
auth.method = "token"
auth.token = "your-secret-token-change-me"

# Logging
log.to = "/var/log/frps.log"
log.level = "info"
log.maxDays = 7

# Limits
transport.maxPoolCount = 5
transport.maxPortsPerClient = 0

# Security
allowPorts = [
  { start = 2000, end = 3000 },
  { start = 3001, end = 3500 },
  { start = 4000, end = 50000 }
]
EOF

    # Create frps systemd service
    cat > /etc/systemd/system/frps.service << 'EOF'
[Unit]
Description=Frp Server Service
After=network.target

[Service]
Type=simple
User=nobody
Restart=on-failure
RestartSec=5s
ExecStart=/usr/local/bin/frps -c /etc/frp/frps.yaml
ExecReload=/bin/kill -HUP $MAINPID
LimitNOFILE=1048576

[Install]
WantedBy=multi-user.target
EOF

    # Create log directory
    mkdir -p /var/log
    touch /var/log/frps.log
    chown nobody:nogroup /var/log/frps.log

    # Enable and start frps service
    systemctl daemon-reload
    systemctl enable frps

    # Clean up
    cd /
    rm -rf /tmp/frp.tar.gz /tmp/frp_*

    log_success "frps installed and configured"
    log_info "frps configuration: /etc/frp/frps.yaml"
    log_info "frps service: systemctl status frps"
}

create_user() {
    if ! id "$WEB_USER" &>/dev/null; then
        log_info "Creating user: $WEB_USER"
        useradd -r -s /bin/false -d /var/www -c "Web server user" "$WEB_USER" || true
    fi
}

setup_application() {
    log_info "Setting up application directory..."
    
    # Create directory
    mkdir -p "$INSTALL_DIR"
    cd "$INSTALL_DIR"
    
    # Copy files from current directory
    if [[ -f "$(dirname "$0")/app.py" ]]; then
        log_info "Copying application files..."
        cp -r "$(dirname "$0")"/* "$INSTALL_DIR/"
    else
        log_error "Application files not found. Please run this script from the project directory."
        exit 1
    fi
    
    # Create virtual environment
    log_info "Creating Python virtual environment..."
    python3 -m venv venv
    source venv/bin/activate
    
    # Install Python dependencies
    log_info "Installing Python dependencies..."
    pip install --upgrade pip
    pip install -r requirements.txt
    
    # Set permissions
    chown -R "$WEB_USER:$WEB_USER" "$INSTALL_DIR"
    chmod +x "$INSTALL_DIR/app.py"
    
    log_success "Application setup completed"
}

setup_sudoers() {
    log_info "Configuring sudo permissions..."
    
    # Copy sudoers file
    cp "$INSTALL_DIR/sudoers-frp-web" /etc/sudoers.d/frp-web
    chmod 440 /etc/sudoers.d/frp-web
    
    # Validate sudoers syntax
    if ! visudo -c -f /etc/sudoers.d/frp-web; then
        log_error "Sudoers configuration is invalid"
        rm -f /etc/sudoers.d/frp-web
        exit 1
    fi
    
    log_success "Sudo permissions configured"
}

setup_systemd() {
    log_info "Setting up systemd service..."
    
    # Update service file with correct paths
    sed -i "s|/opt/frp-web-control|$INSTALL_DIR|g" "$INSTALL_DIR/frp-web.service"
    sed -i "s|User=www-data|User=$WEB_USER|g" "$INSTALL_DIR/frp-web.service"
    sed -i "s|Group=www-data|Group=$WEB_USER|g" "$INSTALL_DIR/frp-web.service"
    sed -i "s|ExecStart=/usr/bin/python3|ExecStart=$INSTALL_DIR/venv/bin/python3|g" "$INSTALL_DIR/frp-web.service"
    
    # Install service file
    cp "$INSTALL_DIR/frp-web.service" "/etc/systemd/system/$SERVICE_NAME.service"
    
    # Reload systemd and enable service
    systemctl daemon-reload
    systemctl enable "$SERVICE_NAME"
    
    log_success "Systemd service configured"
}

configure_firewall() {
    log_info "Configuring firewall..."

    if command -v ufw &> /dev/null; then
        ufw allow "$WEB_PORT/tcp" || true
        ufw allow 7000/tcp || true  # frps main port
        ufw allow 7500/tcp || true  # frps web dashboard
        log_info "UFW rules added for ports $WEB_PORT, 7000, 7500"
    elif command -v firewall-cmd &> /dev/null; then
        firewall-cmd --permanent --add-port="$WEB_PORT/tcp" || true
        firewall-cmd --permanent --add-port=7000/tcp || true
        firewall-cmd --permanent --add-port=7500/tcp || true
        firewall-cmd --reload || true
        log_info "Firewalld rules added for ports $WEB_PORT, 7000, 7500"
    else
        log_warning "No firewall detected. Please manually open ports $WEB_PORT, 7000, 7500 if needed"
    fi
}

start_frps_service() {
    log_info "Starting frps service..."

    systemctl start frps
    sleep 2

    if systemctl is-active --quiet frps; then
        log_success "frps service started successfully"
    else
        log_warning "frps service failed to start. Check logs with: journalctl -u frps"
        log_info "You can start it manually later with: sudo systemctl start frps"
    fi
}

start_service() {
    log_info "Starting FRP Web Control Panel service..."
    
    systemctl start "$SERVICE_NAME"
    
    # Wait a moment and check status
    sleep 3
    
    if systemctl is-active --quiet "$SERVICE_NAME"; then
        log_success "Service started successfully"
    else
        log_error "Service failed to start. Check logs with: journalctl -u $SERVICE_NAME"
        exit 1
    fi
}

show_completion_info() {
    local server_ip
    server_ip=$(hostname -I | awk '{print $1}')
    
    echo
    echo "=============================================="
    log_success "FRP Web Control Panel Installation Complete!"
    echo "=============================================="
    echo
    echo "üìã Installation Summary:"
    echo "   ‚Ä¢ Installation Directory: $INSTALL_DIR"
    echo "   ‚Ä¢ Service Name: $SERVICE_NAME"
    echo "   ‚Ä¢ Web User: $WEB_USER"
    echo "   ‚Ä¢ Port: $WEB_PORT"
    echo
    echo "üåê Access Information:"
    echo "   ‚Ä¢ Web Control Panel: http://$server_ip:$WEB_PORT"
    echo "   ‚Ä¢ FRP Dashboard: http://$server_ip:7500"
    echo "   ‚Ä¢ FRP Server Port: $server_ip:7000"
    echo
    echo "üîê Default Login Credentials:"
    echo "   Web Panel:"
    echo "     ‚Ä¢ Username: admin"
    echo "     ‚Ä¢ Password: admin123"
    echo "   FRP Dashboard:"
    echo "     ‚Ä¢ Username: admin"
    echo "     ‚Ä¢ Password: admin123"
    echo "   ‚ö†Ô∏è  Please change these credentials in production!"
    echo
    echo "üõ†Ô∏è  Service Management:"
    echo "   Web Control Panel:"
    echo "     ‚Ä¢ Start:   sudo systemctl start $SERVICE_NAME"
    echo "     ‚Ä¢ Stop:    sudo systemctl stop $SERVICE_NAME"
    echo "     ‚Ä¢ Status:  sudo systemctl status $SERVICE_NAME"
    echo "     ‚Ä¢ Logs:    sudo journalctl -u $SERVICE_NAME -f"
    echo "   FRP Server:"
    echo "     ‚Ä¢ Start:   sudo systemctl start frps"
    echo "     ‚Ä¢ Stop:    sudo systemctl stop frps"
    echo "     ‚Ä¢ Status:  sudo systemctl status frps"
    echo "     ‚Ä¢ Logs:    sudo journalctl -u frps -f"
    echo
    echo "üìÅ Important Files:"
    echo "   Web Control Panel:"
    echo "     ‚Ä¢ Application: $INSTALL_DIR/app.py"
    echo "     ‚Ä¢ Service: /etc/systemd/system/$SERVICE_NAME.service"
    echo "     ‚Ä¢ Sudoers: /etc/sudoers.d/frp-web"
    echo "   FRP Server:"
    echo "     ‚Ä¢ Binary: /usr/local/bin/frps"
    echo "     ‚Ä¢ Config: /etc/frp/frps.yaml"
    echo "     ‚Ä¢ Service: /etc/systemd/system/frps.service"
    echo "     ‚Ä¢ Logs: /var/log/frps.log"
    echo
    if [[ -d "$BACKUP_DIR" ]]; then
        echo "üíæ Backup: $BACKUP_DIR"
        echo
    fi
    echo "üöÄ The service is now running and will start automatically on boot."
    echo "=============================================="
}

# Main installation process
main() {
    echo "FRP Web Control Panel - One-Click Installation"
    echo "=============================================="
    
    check_root
    check_os
    backup_existing
    install_dependencies
    install_frps
    create_user
    setup_application
    setup_sudoers
    setup_systemd
    configure_firewall
    start_frps_service
    start_service
    show_completion_info
}

# Handle script interruption
trap 'log_error "Installation interrupted"; exit 1' INT TERM

# Run main function
main "$@"
